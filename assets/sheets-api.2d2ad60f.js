const i="AIzaSyBMd8nlalBxzf3xyhIEBHrfKbK2Dd5WgJ4";async function h(r){try{return(await gapi.client.sheets.spreadsheets.get({spreadsheetId:r})).result.properties.title}catch(t){throw console.error("Error fetching spreadsheet title:",t),t}}async function c(r,t=null){if(!window.gapiInitialized)try{await new Promise((e,o)=>{if(document.querySelector('script[src="https://apis.google.com/js/api.js"]'))e();else{const s=document.createElement("script");s.src="https://apis.google.com/js/api.js",s.onload=e,s.onerror=o,document.body.appendChild(s)}}),await new Promise((e,o)=>{gapi.load("client",e)}),await gapi.client.init({apiKey:i,discoveryDocs:["https://sheets.googleapis.com/$discovery/rest?version=v4"]}),window.gapiInitialized=!0}catch(e){throw console.error("Error initializing Google API client:",e),new Error("Failed to initialize Google API client. Please try again.")}try{let e=t;if(!e){const s=await l(r);if(!s||s.length===0)throw new Error("No sheets found in this spreadsheet.");e=s[0],console.log("Using first sheet:",e)}return(await gapi.client.sheets.spreadsheets.values.get({spreadsheetId:r,range:`${e}!A1:Z1000`})).result}catch(e){throw console.error("Error fetching Google Sheet data:",e),e.status===403?new Error("Access denied. Make sure the spreadsheet is shared publicly or with your Google account."):e.status===404?new Error("Spreadsheet not found. Please check the spreadsheet ID."):new Error(`Failed to fetch sheet data: ${e.message||"Unknown error"}`)}}async function l(r){window.gapiInitialized||await c(r,"");try{return(await gapi.client.sheets.spreadsheets.get({spreadsheetId:r,fields:"sheets.properties.title"})).result.sheets.map(e=>e.properties.title)}catch(t){throw console.error("Error fetching sheet names:",t),t.status===403?new Error("Access denied. Make sure the spreadsheet is shared publicly or with your Google account."):t.status===404?new Error("Spreadsheet not found. Please check the spreadsheet ID."):new Error(`Failed to fetch sheet names: ${t.message||"Unknown error"}`)}}function p(r){if(!r||r.length<2)return[];const t=r[0];return r.slice(1).map(o=>{const s={};return t.forEach((n,a)=>{s[n]=o[a]||""}),s})}function d(r,t){return r.map(e=>({text:e[t]||"",date:new Date().toLocaleDateString()})).filter(e=>e.text.trim()!=="")}function u(r,t){if(/^[A-Z]$/i.test(t)){const s=t.toUpperCase().charCodeAt(0)-65;return s>=0&&s<r.length?r[s]:null}const e=r.find(s=>s===t);return e||r.find(s=>s.toLowerCase().includes(t.toLowerCase()))||null}export{l as a,u as b,d as e,c as f,h as g,p as t};
